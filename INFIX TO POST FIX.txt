class InfixToPostfix:
    def __init__(self):
        self.precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}
    
    def infix_to_postfix(self, expression):
        postfix = []
        stack = []
        
        for char in expression:
            if char.isalnum():
                postfix.append(char)
            elif char == '(':
                stack.append(char)
            elif char == ')':
                while stack and stack[-1] != '(':
                    postfix.append(stack.pop())
                stack.pop()  # Pop the '('
            else:
                while (stack and stack[-1] != '(' and
                       self.precedence[char] <= self.precedence.get(stack[-1], 0)):
                    postfix.append(stack.pop())
                stack.append(char)
        
        while stack:
            postfix.append(stack.pop())
        
        return ''.join(postfix)

def evaluate_postfix(expression):
    stack = []
    
    for char in expression:
        if char.isalnum():
            stack.append(char)
        else:
            operand2 = stack.pop()
            operand1 = stack.pop()
            result = eval(operand1 + char + operand2)
            stack.append(str(result))
    
    return int(stack[0])

if __name__ == '__main__':
    infix_expression = "3 + 4 * ( 2 - 1 )"
    converter = InfixToPostfix()
    postfix_expression = converter.infix_to_postfix(infix_expression)
    
    print("Infix Expression:", infix_expression)
    print("Postfix Expression:", postfix_expression)
    
    result = evaluate_postfix(postfix_expression)
    print("Result:", result)
